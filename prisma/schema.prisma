// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    String   @id @default(uuid())
  email      String   @unique
  password   String
  birth_date DateTime
  role       String // E/P/G (Empresa/Profissional/Gerente)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  company      Company?
  professional Professional?
  tickets      Ticket[]

  @@map("users")
}

model Company {
  company_id    String   @id @default(uuid())
  user_id       String   @unique
  cnpj          String   @unique
  address       String
  fantasy_name  String
  social_reason String
  segment       String // Paisagismo, interiores, revestimentos...
  monthly_fee   Float
  commission    Float
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user    User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  budgets Budget[]
  sales   Sale[]

  @@map("companies")
}

model Professional {
  professional_id String   @id @default(uuid())
  user_id         String   @unique
  cpf             String   @unique
  name            String
  preferred_name  String?
  type            String // Designer, Arquiteto...
  desk            String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user     User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  projects Project[]

  @@map("professionals")
}

model Project {
  project_id      String   @id @default(uuid())
  professional_id String
  title           String
  start_date      DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  professional Professional @relation(fields: [professional_id], references: [professional_id], onDelete: Cascade)
  budgets      Budget[]

  @@map("projects")
}

model Budget {
  budget_id   String   @id @default(uuid())
  project_id  String
  company_id  String?
  description String
  status      String   @default("pending") // pending, approved, rejected, finished
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  project Project  @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  company Company? @relation(fields: [company_id], references: [company_id], onDelete: Cascade)
  tickets Ticket[]
  sales   Sale[]

  @@map("budgets")
}

model Ticket {
  ticket_id  String   @id @default(uuid())
  budget_id  String
  user_id    String
  message    String
  file_url   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  budget Budget @relation(fields: [budget_id], references: [budget_id], onDelete: Cascade)

  @@map("tickets")
}

model Sale {
  sale_id    String   @id @default(uuid())
  budget_id  String
  company_id String
  value      Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  budget  Budget  @relation(fields: [budget_id], references: [budget_id], onDelete: Cascade)
  company Company @relation(fields: [company_id], references: [company_id], onDelete: Cascade)

  @@map("sales")
}
